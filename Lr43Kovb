import java.io.FileWriter;
import java.io.IOException;
import java.util.*;

public class Lr43Kovb {
    static class Book {
        String title;
        String author;
        String publisher;
        int year;
        float price;

        public Book(String title, String author, String publisher, int year, float price) {
            this.title = title;
            this.author = author;
            this.publisher = publisher;
            this.year = year;
            this.price = price;
        }

        @Override
        public String toString() {
            return "Title: " + title + ", Author: " + author + ", Publisher: " + publisher + ", Year: " + year + ", Price: " + price;
        }

        public  String getTitle() {
            return title;
        }

        public  String getAuthor() {
            return author;
        }

        public  int getYear() {
            return year;
        }
        public float getPrice() {
            return price;
        }
    }

    private static void removeBook(HashMap<Integer, Book> catalog, int isbnToRemove) {

        if (catalog.containsKey(isbnToRemove)) {
            catalog.remove(isbnToRemove);
            System.out.println("Book with ISBN " + isbnToRemove + " removed from the catalog.");
        } else {
            System.out.println("Book with ISBN " + isbnToRemove + " does not exist in the catalog.");
        }
    }

    private static void sortCatalog(HashMap<Integer, Book> catalog) {
        List<Book> sortedCatalog = new ArrayList<>(catalog.values());

        for (int i = 0; i < sortedCatalog.size() - 1; i++) {
            for (int j = 0; j < sortedCatalog.size() - i - 1; j++) {
                Book currentBook = sortedCatalog.get(j);
                Book nextBook = sortedCatalog.get(j + 1);

                if (currentBook.getYear() > nextBook.getYear()) {
                    sortedCatalog.set(j, nextBook);
                    sortedCatalog.set(j + 1, currentBook);
                }
                else if (currentBook.getYear() == nextBook.getYear() && currentBook.getPrice() > nextBook.getPrice()) {
                    sortedCatalog.set(j, nextBook);
                    sortedCatalog.set(j + 1, currentBook);
                }
                else if (currentBook.getYear() == nextBook.getYear() && currentBook.getPrice() == nextBook.getPrice()
                        && currentBook.getTitle().compareTo(nextBook.getTitle()) > 0) {
                    sortedCatalog.set(j, nextBook);
                    sortedCatalog.set(j + 1, currentBook);
                }
            }
        }

        for (int i = 0; i < sortedCatalog.size(); i++) {
            System.out.println((i + 1) + ": " + sortedCatalog.get(i));
        }
    }


    private static void addBook(HashMap<Integer, Book> catalog, int isbnToAdd, String title, String author, String publisher, int year, float price) {
        if (!catalog.containsKey(isbnToAdd)) {
            catalog.put(isbnToAdd, new Book(title, author, publisher, year, price));
            System.out.println("Book with ISBN " + isbnToAdd + " added.");
        } else {
            System.out.println("Book with ISBN " + isbnToAdd + " already exists in the catalog.");
        }
    }

    private static void viewCatalog(HashMap<Integer, Book> catalog) {
        System.out.println("Catalog:");
        for (Map.Entry<Integer, Book> entry : catalog.entrySet()) {
            System.out.println(entry.getKey() + ": " + entry.getValue());
        }
    }

    public static void main(String[] args) throws IOException {
        HashMap<Integer, Book> catalog = new HashMap<>();
        Scanner scanner = new Scanner(System.in);
        Random random = new Random();

        for (int i = 0; i < 10; i++) {
            String title = "Book" + (i + 1);
            String author = "Author" + (i + 1);
            String publisher = "Publisher" + (i + 1);
            int year = random.nextInt(324) + 1700;
            float price = random.nextFloat() * 100;
            catalog.put(i + 1, new Book(title, author, publisher, year, price));
        }

        FileWriter writer = new FileWriter("Catalog.txt", true);

        System.out.println("Initial Catalog:");
        for (Map.Entry<Integer, Book> entry : catalog.entrySet()) {
            System.out.println(entry.getKey() + ": " + entry.getValue());
            writer.write(entry.getKey() + ": " + entry.getValue() + "\n");
        }

        boolean exit = false;
        while (!exit) {
            System.out.println("\nMenu:");
            System.out.println("1. View Catalog");
            System.out.println("2. Add Book");
            System.out.println("3. Remove Book");
            System.out.println("4. Sort Catalog");
            System.out.println("5. Exit");
            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();
            scanner.nextLine();

            switch (choice) {
                case 1:
                    viewCatalog(catalog);
                    break;
                case 2:
                    System.out.print("Enter ISBN of the book to add: ");
                    int isbnToAdd = scanner.nextInt();
                    scanner.nextLine();
                    System.out.print("Enter book details:\nTitle: ");
                    String title = scanner.nextLine();
                    System.out.print("Author: ");
                    String author = scanner.nextLine();
                    System.out.print("Publisher: ");
                    String publisher = scanner.nextLine();
                    System.out.print("Year: ");
                    int year = scanner.nextInt();
                    System.out.print("Price: ");
                    float price = scanner.nextFloat();
                    addBook(catalog, isbnToAdd, title, author, publisher, year, price);
                    break;
                case 3:
                    System.out.print("Enter ISBN of the book to remove: ");
                    int isbnToRemove = scanner.nextInt();
                    scanner.nextLine();
                    removeBook(catalog, isbnToRemove);
                    break;
                case 4:
                    sortCatalog(catalog);
                    break;
                case 5:
                    exit = true;
                    break;
                default:
                    System.out.println("Invalid choice. Please enter a number from 1 to 5.");
            }
        }
        writer.close();
        scanner.close();
    }
}
